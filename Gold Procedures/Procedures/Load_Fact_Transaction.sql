CREATE OR REPLACE PROCEDURE GRIZZLY_DB.GOLD.ETL_LOAD_FACT_TXN()
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  --Stage transaction data from Silver
  
  CREATE OR REPLACE TEMP TABLE STG_TXN_RAW AS
  SELECT
    UPPER(TRIM(t.UNIFIED_TXN_ID))     AS TXN_ID,
    TO_DATE(TO_VARCHAR(t.DATE))       AS DATE_ID,
    UPPER(TRIM(t.CUSTOMER_ID))        AS CUSTOMER_KEY,
    UPPER(TRIM(t.CARD_ID))            AS CARD_ID,
    UPPER(TRIM(t.MERCHANT_ID))        AS MERCHANT_ID,
    ''UNKNOWN''                         AS CHANNEL,  -- fallback (USE_CHIP missing)
    CAST(t.AMOUNT AS FLOAT)           AS TRANSACTION_AMOUNT,
    TRIM(t.ERRORS)                    AS ERROR_CODE,
    CAST(t.MCC AS STRING)             AS MCC_AT_TXN,
    INITCAP(TRIM(t.MERCHANT_CITY))    AS CITY_AT_TXN,
    UPPER(TRIM(t.MERCHANT_STATE))     AS STATE_AT_TXN,
    CURRENT_TIMESTAMP()               AS LOAD_TS
  FROM GRIZZLY_DB.SILVER.TRANSACTIONS t
  WHERE t.UNIFIED_TXN_ID IS NOT NULL;

  --Lookup surrogate keys from dimensions

  CREATE OR REPLACE TEMP TABLE STG_TXN_WITH_SK AS
  SELECT
    s.TXN_ID,
    s.DATE_ID,
    c.CUSTOMER_SK,
    cd.CARD_SK,
    m.MERCHANT_SK,
    s.CUSTOMER_KEY AS CUSTOMER_KEY_BUS,
    s.CARD_ID      AS CARD_ID_BUS,
    s.MERCHANT_ID  AS MERCHANT_ID_BUS,
    s.CHANNEL,
    s.TRANSACTION_AMOUNT,
    s.ERROR_CODE,
    s.MCC_AT_TXN,
    s.CITY_AT_TXN,
    s.STATE_AT_TXN,
    s.LOAD_TS
  FROM STG_TXN_RAW s
  LEFT JOIN GRIZZLY_DB.GOLD.DIM_CUSTOMER c
    ON s.CUSTOMER_KEY = c.CUSTOMER_KEY
  LEFT JOIN GRIZZLY_DB.GOLD.DIM_CARD cd
    ON s.CARD_ID = cd.CARD_ID
  LEFT JOIN GRIZZLY_DB.GOLD.DIM_MERCHANT m
    ON s.MERCHANT_ID = m.MERCHANT_ID
  WHERE c.CUSTOMER_SK IS NOT NULL
    AND cd.CARD_SK IS NOT NULL
    AND m.MERCHANT_SK IS NOT NULL;

  --Merge into FACT_TRANSACTION

  MERGE INTO GRIZZLY_DB.GOLD.FACT_TRANSACTION tgt
  USING STG_TXN_WITH_SK src
     ON tgt.TXN_ID = src.TXN_ID
  WHEN MATCHED THEN UPDATE SET
       tgt.DATE_ID            = src.DATE_ID,
       tgt.CUSTOMER_SK        = src.CUSTOMER_SK,
       tgt.CARD_SK            = src.CARD_SK,
       tgt.MERCHANT_SK        = src.MERCHANT_SK,
       tgt.CUSTOMER_KEY_BUS   = src.CUSTOMER_KEY_BUS,
       tgt.CARD_ID_BUS        = src.CARD_ID_BUS,
       tgt.MERCHANT_ID_BUS    = src.MERCHANT_ID_BUS,
       tgt.CHANNEL            = src.CHANNEL,
       tgt.TRANSACTION_AMOUNT = src.TRANSACTION_AMOUNT,
       tgt.ERROR_CODE         = src.ERROR_CODE,
       tgt.MCC_AT_TXN         = src.MCC_AT_TXN,
       tgt.CITY_AT_TXN        = src.CITY_AT_TXN,
       tgt.STATE_AT_TXN       = src.STATE_AT_TXN,
       tgt.LOAD_TS            = src.LOAD_TS
  WHEN NOT MATCHED THEN
       INSERT (TXN_ID, DATE_ID, CUSTOMER_SK, CARD_SK, MERCHANT_SK,
               CUSTOMER_KEY_BUS, CARD_ID_BUS, MERCHANT_ID_BUS,
               CHANNEL, TRANSACTION_AMOUNT, ERROR_CODE,
               MCC_AT_TXN, CITY_AT_TXN, STATE_AT_TXN, LOAD_TS)
       VALUES (src.TXN_ID, src.DATE_ID, src.CUSTOMER_SK, src.CARD_SK, src.MERCHANT_SK,
               src.CUSTOMER_KEY_BUS, src.CARD_ID_BUS, src.MERCHANT_ID_BUS,
               src.CHANNEL, src.TRANSACTION_AMOUNT, src.ERROR_CODE,
               src.MCC_AT_TXN, src.CITY_AT_TXN, src.STATE_AT_TXN, src.LOAD_TS);

  RETURN ''FACT_TRANSACTION loaded and upserted'';
END;
';