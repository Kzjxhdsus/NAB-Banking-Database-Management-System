CREATE OR REPLACE PROCEDURE GRIZZLY_DB.GOLD.ETL_LOAD_DIM_DISPUTE_STAGE()
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  CREATE TABLE IF NOT EXISTS GOLD.DIM_DISPUTE_STAGE (
    STAGE_KEY        NUMBER AUTOINCREMENT START 1 INCREMENT 1,
    STAGE_CODE       STRING      NOT NULL UNIQUE,   -- ''PENDING'' / ''RESOLVED''
    LIFECYCLE_ORDER  NUMBER,
    IS_TERMINAL      BOOLEAN,
    CREATED_AT       TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT       TIMESTAMP_NTZ,
    PRIMARY KEY (STAGE_KEY)
  );

  MERGE INTO GOLD.DIM_DISPUTE_STAGE d
  USING (
    SELECT ''PENDING''  AS STAGE_CODE, 1 AS LIFECYCLE_ORDER, FALSE AS IS_TERMINAL
    UNION ALL
    SELECT ''RESOLVED'' AS STAGE_CODE, 2 AS LIFECYCLE_ORDER, TRUE  AS IS_TERMINAL
  ) s
  ON d.STAGE_CODE = s.STAGE_CODE
  WHEN MATCHED AND (
       NVL(d.LIFECYCLE_ORDER,-1) <> s.LIFECYCLE_ORDER
    OR NVL(d.IS_TERMINAL, FALSE) <> s.IS_TERMINAL
  )
    THEN UPDATE SET
      LIFECYCLE_ORDER = s.LIFECYCLE_ORDER,
      IS_TERMINAL     = s.IS_TERMINAL,
      UPDATED_AT      = CURRENT_TIMESTAMP()
  WHEN NOT MATCHED
    THEN INSERT (STAGE_CODE, LIFECYCLE_ORDER, IS_TERMINAL)
         VALUES (s.STAGE_CODE, s.LIFECYCLE_ORDER, s.IS_TERMINAL);

  RETURN ''DIM_DISPUTE_STAGE upserted (PENDING/RESOLVED).'';
END;
';