CREATE OR REPLACE PROCEDURE GRIZZLY_DB.GOLD.ETL_LOAD_FACT_DISPUTE_EVENTS()
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN

  --Stage raw dispute + transaction data from Silver
  CREATE OR REPLACE TEMP TABLE STG_BASE AS
  SELECT
    UPPER(TRIM(d.DISPUTE_ID))        AS DISPUTE_CASE_ID,
    TO_TIMESTAMP_NTZ(d.DISPUTE_RAISED)   AS RAISED_TS,
    TO_TIMESTAMP_NTZ(d.DISPUTE_RESOLVED) AS RESOLVED_TS,
    UPPER(TRIM(d.REASON_CODE_STD))   AS REASON_CODE,
    CAST(t.AMOUNT AS FLOAT)          AS DISPUTED_AMOUNT,
    UPPER(TRIM(t.MERCHANT_ID))       AS MERCHANT_ID,
    UPPER(TRIM(t.CARD_ID))           AS CARD_ID,
    UPPER(TRIM(t.CUSTOMER_ID))       AS CUSTOMER_KEY,
    CAST(d.RESOLUTION_DAYS AS FLOAT) AS DAYS_TO_RESOLUTION,
    CURRENT_TIMESTAMP()              AS LOAD_TS
  FROM GRIZZLY_DB.SILVER.DISPUTES d
  LEFT JOIN GRIZZLY_DB.SILVER.TRANSACTIONS t
    ON t.UNIFIED_TXN_ID = d.UNIFIED_TXN_ID;

  --Build event rows (Pending / Resolved)

  CREATE OR REPLACE TEMP TABLE STG_EVENTS AS
  WITH E AS (
    SELECT
      b.DISPUTE_CASE_ID,
      ''PENDING''                     AS STAGE_CODE,
      b.RAISED_TS                   AS EVENT_TS,
      CAST(b.RAISED_TS AS DATE)     AS DATE_ID,
      b.CUSTOMER_KEY,
      b.CARD_ID,
      b.MERCHANT_ID,
      b.REASON_CODE,
      b.DISPUTED_AMOUNT,
      CAST(NULL AS FLOAT)           AS DAYS_TO_RESOLUTION,
      b.LOAD_TS
    FROM STG_BASE b
    WHERE b.RAISED_TS IS NOT NULL

    UNION ALL

    SELECT
      b.DISPUTE_CASE_ID,
      ''RESOLVED''                    AS STAGE_CODE,
      b.RESOLVED_TS                 AS EVENT_TS,
      CAST(b.RESOLVED_TS AS DATE)   AS DATE_ID,
      b.CUSTOMER_KEY,
      b.CARD_ID,
      b.MERCHANT_ID,
      b.REASON_CODE,
      b.DISPUTED_AMOUNT,
      b.DAYS_TO_RESOLUTION,
      b.LOAD_TS
    FROM STG_BASE b
    WHERE b.RESOLVED_TS IS NOT NULL
  )
  SELECT *
  FROM (
    SELECT e.*,
           ROW_NUMBER() OVER (
             PARTITION BY e.DISPUTE_CASE_ID, e.EVENT_TS, e.STAGE_CODE
             ORDER BY e.LOAD_TS DESC
           ) rn
    FROM E e
  )
  WHERE rn = 1;


  --Map dimension surrogate keys
  
  CREATE OR REPLACE TEMP TABLE STG_EVENTS_WITH_SK AS
  SELECT 
    s.DISPUTE_CASE_ID,
    ds.STAGE_KEY,
    s.DATE_ID,
    s.EVENT_TS,
    c.CUSTOMER_SK,
    cd.CARD_SK,
    m.MERCHANT_SK,
    s.CUSTOMER_KEY   AS CUSTOMER_KEY_BUS,
    s.CARD_ID        AS CARD_ID_BUS,
    s.MERCHANT_ID    AS MERCHANT_ID_BUS,
    s.REASON_CODE,
    s.DISPUTED_AMOUNT,
    s.DAYS_TO_RESOLUTION,
    s.LOAD_TS
  FROM STG_EVENTS s
  JOIN GRIZZLY_DB.GOLD.DIM_DISPUTE_STAGE ds
    ON ds.STAGE_CODE = s.STAGE_CODE
  LEFT JOIN GRIZZLY_DB.GOLD.DIM_CUSTOMER c
    ON s.CUSTOMER_KEY = c.CUSTOMER_KEY
  LEFT JOIN GRIZZLY_DB.GOLD.DIM_CARD cd
    ON s.CARD_ID = cd.CARD_ID
  LEFT JOIN GRIZZLY_DB.GOLD.DIM_MERCHANT m
    ON s.MERCHANT_ID = m.MERCHANT_ID;


  --Merge into FACT_DISPUTE
  
  MERGE INTO GRIZZLY_DB.GOLD.FACT_DISPUTE tgt
  USING STG_EVENTS_WITH_SK src
     ON  tgt.DISPUTE_CASE_ID = src.DISPUTE_CASE_ID
     AND tgt.EVENT_TS        = src.EVENT_TS
  WHEN MATCHED THEN UPDATE SET
      tgt.STAGE_KEY          = src.STAGE_KEY,
      tgt.DATE_ID            = src.DATE_ID,
      tgt.CUSTOMER_SK        = src.CUSTOMER_SK,
      tgt.CARD_SK            = src.CARD_SK,
      tgt.MERCHANT_SK        = src.MERCHANT_SK,
      tgt.CUSTOMER_KEY_BUS   = src.CUSTOMER_KEY_BUS,
      tgt.CARD_ID_BUS        = src.CARD_ID_BUS,
      tgt.MERCHANT_ID_BUS    = src.MERCHANT_ID_BUS,
      tgt.REASON_CODE        = src.REASON_CODE,
      tgt.DISPUTED_AMOUNT    = src.DISPUTED_AMOUNT,
      tgt.DAYS_TO_RESOLUTION = src.DAYS_TO_RESOLUTION,
      tgt.LOAD_TS            = src.LOAD_TS
  WHEN NOT MATCHED THEN INSERT (
      DISPUTE_CASE_ID, STAGE_KEY, DATE_ID, EVENT_TS,
      CUSTOMER_SK, CARD_SK, MERCHANT_SK,
      CUSTOMER_KEY_BUS, CARD_ID_BUS, MERCHANT_ID_BUS,
      REASON_CODE, DISPUTED_AMOUNT, DAYS_TO_RESOLUTION, LOAD_TS
  ) VALUES (
      src.DISPUTE_CASE_ID, src.STAGE_KEY, src.DATE_ID, src.EVENT_TS,
      src.CUSTOMER_SK, src.CARD_SK, src.MERCHANT_SK,
      src.CUSTOMER_KEY_BUS, src.CARD_ID_BUS, src.MERCHANT_ID_BUS,
      src.REASON_CODE, src.DISPUTED_AMOUNT, src.DAYS_TO_RESOLUTION, src.LOAD_TS
  );

  RETURN ''FACT_DISPUTE loaded with surrogate keys (Type-1 upsert)'';
END;
';