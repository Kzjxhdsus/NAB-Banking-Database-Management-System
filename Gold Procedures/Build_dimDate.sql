CREATE OR REPLACE PROCEDURE GRIZZLY_DB.GOLD.ETL_BUILD_DIM_DATE_AND_SYNC_REASON()
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  --Build DIM_DATE
  CREATE OR REPLACE TABLE GRIZZLY_DB.GOLD.DIM_DATE AS
  WITH src_bounds AS (
    SELECT
      LEAST(
        MIN(TO_DATE(TO_VARCHAR(t.DATE))),
        MIN(TO_DATE(TO_VARCHAR(d.DISPUTE_RAISED)))
      ) AS MIN_DATE,
      GREATEST(
        MAX(TO_DATE(TO_VARCHAR(t.DATE))),
        COALESCE(MAX(TO_DATE(TO_VARCHAR(d.DISPUTE_RESOLVED))), CURRENT_DATE())
      ) AS MAX_DATE
    FROM GRIZZLY_DB.SILVER.TRANSACTIONS t
    FULL OUTER JOIN GRIZZLY_DB.SILVER.DISPUTES d ON 1=1
  ),
  span AS (
    SELECT MIN_DATE, DATEADD(DAY, 365, MAX_DATE) AS MAX_DATE_PLUS FROM src_bounds
  ),
  gen AS (
    SELECT
      ROW_NUMBER() OVER (ORDER BY SEQ4()) - 1 AS n,
      s.MIN_DATE,
      s.MAX_DATE_PLUS
    FROM TABLE(GENERATOR(ROWCOUNT => 20000)) g
    CROSS JOIN span s
  )
  SELECT
    DATEADD(DAY, n, MIN_DATE)                                      AS DATE_ID,
    EXTRACT(DAY FROM DATEADD(DAY, n, MIN_DATE))                    AS DAY_OF_MONTH,
    EXTRACT(DOW FROM DATEADD(DAY, n, MIN_DATE))                    AS DAY_OF_WEEK,
    EXTRACT(WEEK FROM DATEADD(DAY, n, MIN_DATE))                   AS WEEK_OF_YEAR,
    EXTRACT(MONTH FROM DATEADD(DAY, n, MIN_DATE))                  AS MONTH_NUM,
    TO_CHAR(DATEADD(DAY, n, MIN_DATE), ''Mon'')                      AS MONTH_NAME,
    EXTRACT(QUARTER FROM DATEADD(DAY, n, MIN_DATE))                AS QUARTER_NUM,
    EXTRACT(YEAR FROM DATEADD(DAY, n, MIN_DATE))                   AS YEAR_NUM,
    (EXTRACT(DOW FROM DATEADD(DAY, n, MIN_DATE)) IN (0,6))         AS IS_WEEKEND
  FROM gen
  WHERE n <= DATEDIFF(DAY, MIN_DATE, MAX_DATE_PLUS);


  -- Sync DIM_DISPUTE_REASON
  
  MERGE INTO GRIZZLY_DB.GOLD.DIM_DISPUTE_REASON t
  USING (
    SELECT DISTINCT
      UPPER(TRIM(REASON_CODE_STD)) AS REASON_CODE
    FROM GRIZZLY_DB.SILVER.DISPUTES
    WHERE REASON_CODE_STD IS NOT NULL
  ) s
  ON t.REASON_CODE = s.REASON_CODE
  WHEN NOT MATCHED THEN
    INSERT (REASON_CODE)
    VALUES (s.REASON_CODE);

  RETURN ''DIM_DATE rebuilt and DIM_DISPUTE_REASON synced successfully'';
END;
';