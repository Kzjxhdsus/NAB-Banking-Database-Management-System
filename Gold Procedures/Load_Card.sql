CREATE OR REPLACE PROCEDURE GRIZZLY_DB.GOLD.ETL_LOAD_DIM_CARD()
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  --Stage latest unique records from Silver.CARDS

  CREATE OR REPLACE TEMP TABLE STG_CARD_LATEST AS
  SELECT
      UPPER(TRIM(CARD_ID))       AS CARD_ID,
      UPPER(TRIM(CUSTOMER_ID))   AS CUSTOMER_KEY,
      INITCAP(TRIM(CARD_BRAND))  AS CARD_BRAND,
      INITCAP(TRIM(CARD_TYPE))   AS CARD_TYPE,
      TO_DATE(TO_VARCHAR(ACCT_OPEN_DATE)) AS ACCT_OPEN_DATE,
      CAST(CREDIT_LIMIT AS FLOAT) AS CREDIT_LIMIT,
      TO_DATE(TO_VARCHAR(EXPIRES)) AS EXPIRES,
      HAS_CHIP,
      CARD_ON_DARK_WEB,
      CAST(NUM_CARDS_ISSUED AS FLOAT) AS NUM_CARDS_ISSUED,
      CURRENT_TIMESTAMP() AS SRC_LOAD_TS
  FROM GRIZZLY_DB.SILVER.CARDS
  WHERE CARD_ID IS NOT NULL;

  --Merge into Gold DIM_CARD (Type-1 SCD)
  
  MERGE INTO GRIZZLY_DB.GOLD.DIM_CARD d
  USING STG_CARD_LATEST s
     ON d.CARD_ID = s.CARD_ID
  WHEN MATCHED THEN UPDATE SET
       d.CUSTOMER_KEY     = s.CUSTOMER_KEY,
       d.CARD_BRAND       = s.CARD_BRAND,
       d.CARD_TYPE        = s.CARD_TYPE,
       d.ACCT_OPEN_DATE   = s.ACCT_OPEN_DATE,
       d.CREDIT_LIMIT     = s.CREDIT_LIMIT,
       d.EXPIRES          = s.EXPIRES,
       d.HAS_CHIP         = s.HAS_CHIP,
       d.CARD_ON_DARK_WEB = s.CARD_ON_DARK_WEB,
       d.NUM_CARDS_ISSUED = s.NUM_CARDS_ISSUED,
       d.LOAD_TS          = CURRENT_TIMESTAMP()
  WHEN NOT MATCHED THEN INSERT (
       CARD_ID, CUSTOMER_KEY, CARD_BRAND, CARD_TYPE, ACCT_OPEN_DATE,
       CREDIT_LIMIT, EXPIRES, HAS_CHIP, CARD_ON_DARK_WEB, NUM_CARDS_ISSUED,
       LOAD_TS
  ) VALUES (
       s.CARD_ID, s.CUSTOMER_KEY, s.CARD_BRAND, s.CARD_TYPE, s.ACCT_OPEN_DATE,
       s.CREDIT_LIMIT, s.EXPIRES, s.HAS_CHIP, s.CARD_ON_DARK_WEB, s.NUM_CARDS_ISSUED,
       CURRENT_TIMESTAMP()
  );

  RETURN ''DIM_CARD loaded'';
END;
';